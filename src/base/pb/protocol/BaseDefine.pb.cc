// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseDefine.proto

#include "BaseDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace BaseDefine {
}  // namespace BaseDefine
namespace protobuf_BaseDefine_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "BaseDefine.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020BaseDefine.proto\022\nBaseDefine*\243\001\n\tServi"
      "ceID\022\020\n\014SID_REGISTER\020\000\022\r\n\tSID_LOGIN\020\001\022\022\n"
      "\016SID_BUDDY_LIST\020\002\022\013\n\007SID_MSG\020\003\022\r\n\tSID_GR"
      "OUP\020\004\022\014\n\010SID_FILE\020\005\022\026\n\022SID_SWITCH_SERVIC"
      "E\020\006\022\r\n\tSID_OTHER\020\007\022\020\n\014SID_INTERNAL\020\010*]\n\010"
      "RegCmdID\022\025\n\021CID_REGISTER_NONE\020\000\022\034\n\027CID_R"
      "EGISTER_REQ_USEREG\020\200\002\022\034\n\027CID_REGISTER_RE"
      "S_USEREG\020\201\002*\372\003\n\nLoginCmdID\022\022\n\016CID_LOGIN_"
      "NONE\020\000\022\034\n\027CID_LOGIN_REQ_MSGSERVER\020\200\004\022\034\n\027"
      "CID_LOGIN_RES_MSGSERVER\020\201\004\022\034\n\027CID_LOGIN_"
      "REQ_USERLOGIN\020\202\004\022\034\n\027CID_LOGIN_RES_USERLO"
      "GIN\020\203\004\022\033\n\026CID_LOGIN_REQ_LOGINOUT\020\204\004\022\033\n\026C"
      "ID_LOGIN_RES_LOGINOUT\020\205\004\022\030\n\023CID_LOGIN_KI"
      "CK_USER\020\206\004\022\036\n\031CID_LOGIN_REQ_DEVICETOKEN\020"
      "\207\004\022\036\n\031CID_LOGIN_RES_DEVICETOKEN\020\210\004\022\037\n\032CI"
      "D_LOGIN_REQ_KICKPCCLIENT\020\211\004\022\037\n\032CID_LOGIN"
      "_RES_KICKPCCLIENT\020\212\004\022\036\n\031CID_LOGIN_REQ_PU"
      "SH_SHIELD\020\213\004\022\036\n\031CID_LOGIN_RES_PUSH_SHIEL"
      "D\020\214\004\022$\n\037CID_LOGIN_REQ_QUERY_PUSH_SHIELD\020"
      "\215\004\022$\n\037CID_LOGIN_RES_QUERY_PUSH_SHIELD\020\216\004"
      "*^\n\016RegisterResult\022\024\n\020REGISTER_SUCCESS\020\000"
      "\022\032\n\026REGISTER_ALREADY_EXIST\020\001\022\032\n\026REGISTER"
      "_OTHER_FAILUER\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 904);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BaseDefine.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_BaseDefine_2eproto
namespace BaseDefine {
const ::google::protobuf::EnumDescriptor* ServiceID_descriptor() {
  protobuf_BaseDefine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseDefine_2eproto::file_level_enum_descriptors[0];
}
bool ServiceID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RegCmdID_descriptor() {
  protobuf_BaseDefine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseDefine_2eproto::file_level_enum_descriptors[1];
}
bool RegCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 256:
    case 257:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoginCmdID_descriptor() {
  protobuf_BaseDefine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseDefine_2eproto::file_level_enum_descriptors[2];
}
bool LoginCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RegisterResult_descriptor() {
  protobuf_BaseDefine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseDefine_2eproto::file_level_enum_descriptors[3];
}
bool RegisterResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace BaseDefine
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
