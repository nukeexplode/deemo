// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg2Route.proto

#ifndef PROTOBUF_INCLUDED_Msg2Route_2eproto
#define PROTOBUF_INCLUDED_Msg2Route_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Msg2Route_2eproto 

namespace protobuf_Msg2Route_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Msg2Route_2eproto
namespace Msg2Route {
class KickUser;
class KickUserDefaultTypeInternal;
extern KickUserDefaultTypeInternal _KickUser_default_instance_;
class LoginReq;
class LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRsp;
class LoginRspDefaultTypeInternal;
extern LoginRspDefaultTypeInternal _LoginRsp_default_instance_;
}  // namespace Msg2Route
namespace google {
namespace protobuf {
template<> ::Msg2Route::KickUser* Arena::CreateMaybeMessage<::Msg2Route::KickUser>(Arena*);
template<> ::Msg2Route::LoginReq* Arena::CreateMaybeMessage<::Msg2Route::LoginReq>(Arena*);
template<> ::Msg2Route::LoginRsp* Arena::CreateMaybeMessage<::Msg2Route::LoginRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Msg2Route {

// ===================================================================

class LoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Msg2Route.LoginReq) */ {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LoginReq* other);
  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return CreateMaybeMessage<LoginReq>(NULL);
  }

  LoginReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // uint32 session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::uint32 session_id() const;
  void set_session_id(::google::protobuf::uint32 value);

  // uint32 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Msg2Route.LoginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::uint32 session_id_;
  ::google::protobuf::uint32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Msg2Route_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Msg2Route.LoginRsp) */ {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRsp(LoginRsp&& from) noexcept
    : LoginRsp() {
    *this = ::std::move(from);
  }

  inline LoginRsp& operator=(LoginRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRsp* internal_default_instance() {
    return reinterpret_cast<const LoginRsp*>(
               &_LoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LoginRsp* other);
  friend void swap(LoginRsp& a, LoginRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRsp* New() const final {
    return CreateMaybeMessage<LoginRsp>(NULL);
  }

  LoginRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 3;
  void clear_server_name();
  static const int kServerNameFieldNumber = 3;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // uint32 client_type = 2;
  void clear_client_type();
  static const int kClientTypeFieldNumber = 2;
  ::google::protobuf::uint32 client_type() const;
  void set_client_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Msg2Route.LoginRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 client_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Msg2Route_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KickUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Msg2Route.KickUser) */ {
 public:
  KickUser();
  virtual ~KickUser();

  KickUser(const KickUser& from);

  inline KickUser& operator=(const KickUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KickUser(KickUser&& from) noexcept
    : KickUser() {
    *this = ::std::move(from);
  }

  inline KickUser& operator=(KickUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KickUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickUser* internal_default_instance() {
    return reinterpret_cast<const KickUser*>(
               &_KickUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(KickUser* other);
  friend void swap(KickUser& a, KickUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KickUser* New() const final {
    return CreateMaybeMessage<KickUser>(NULL);
  }

  KickUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KickUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KickUser& from);
  void MergeFrom(const KickUser& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string kick_result_string = 3;
  void clear_kick_result_string();
  static const int kKickResultStringFieldNumber = 3;
  const ::std::string& kick_result_string() const;
  void set_kick_result_string(const ::std::string& value);
  #if LANG_CXX11
  void set_kick_result_string(::std::string&& value);
  #endif
  void set_kick_result_string(const char* value);
  void set_kick_result_string(const char* value, size_t size);
  ::std::string* mutable_kick_result_string();
  ::std::string* release_kick_result_string();
  void set_allocated_kick_result_string(::std::string* kick_result_string);

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // .BaseDefine.ClientType client_type = 2;
  void clear_client_type();
  static const int kClientTypeFieldNumber = 2;
  ::BaseDefine::ClientType client_type() const;
  void set_client_type(::BaseDefine::ClientType value);

  // @@protoc_insertion_point(class_scope:Msg2Route.KickUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr kick_result_string_;
  ::google::protobuf::uint32 user_id_;
  int client_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Msg2Route_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginReq

// uint32 user_id = 2;
inline void LoginReq::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 LoginReq::user_id() const {
  // @@protoc_insertion_point(field_get:Msg2Route.LoginReq.user_id)
  return user_id_;
}
inline void LoginReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Msg2Route.LoginReq.user_id)
}

// string password = 3;
inline void LoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginReq::password() const {
  // @@protoc_insertion_point(field_get:Msg2Route.LoginReq.password)
  return password_.GetNoArena();
}
inline void LoginReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg2Route.LoginReq.password)
}
#if LANG_CXX11
inline void LoginReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg2Route.LoginReq.password)
}
#endif
inline void LoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg2Route.LoginReq.password)
}
inline void LoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg2Route.LoginReq.password)
}
inline ::std::string* LoginReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Msg2Route.LoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_password() {
  // @@protoc_insertion_point(field_release:Msg2Route.LoginReq.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Msg2Route.LoginReq.password)
}

// uint32 session_id = 1;
inline void LoginReq::clear_session_id() {
  session_id_ = 0u;
}
inline ::google::protobuf::uint32 LoginReq::session_id() const {
  // @@protoc_insertion_point(field_get:Msg2Route.LoginReq.session_id)
  return session_id_;
}
inline void LoginReq::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:Msg2Route.LoginReq.session_id)
}

// -------------------------------------------------------------------

// LoginRsp

// uint32 user_id = 1;
inline void LoginRsp::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 LoginRsp::user_id() const {
  // @@protoc_insertion_point(field_get:Msg2Route.LoginRsp.user_id)
  return user_id_;
}
inline void LoginRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Msg2Route.LoginRsp.user_id)
}

// uint32 client_type = 2;
inline void LoginRsp::clear_client_type() {
  client_type_ = 0u;
}
inline ::google::protobuf::uint32 LoginRsp::client_type() const {
  // @@protoc_insertion_point(field_get:Msg2Route.LoginRsp.client_type)
  return client_type_;
}
inline void LoginRsp::set_client_type(::google::protobuf::uint32 value) {
  
  client_type_ = value;
  // @@protoc_insertion_point(field_set:Msg2Route.LoginRsp.client_type)
}

// string server_name = 3;
inline void LoginRsp::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRsp::server_name() const {
  // @@protoc_insertion_point(field_get:Msg2Route.LoginRsp.server_name)
  return server_name_.GetNoArena();
}
inline void LoginRsp::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg2Route.LoginRsp.server_name)
}
#if LANG_CXX11
inline void LoginRsp::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg2Route.LoginRsp.server_name)
}
#endif
inline void LoginRsp::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg2Route.LoginRsp.server_name)
}
inline void LoginRsp::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg2Route.LoginRsp.server_name)
}
inline ::std::string* LoginRsp::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:Msg2Route.LoginRsp.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRsp::release_server_name() {
  // @@protoc_insertion_point(field_release:Msg2Route.LoginRsp.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRsp::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:Msg2Route.LoginRsp.server_name)
}

// -------------------------------------------------------------------

// KickUser

// uint32 user_id = 1;
inline void KickUser::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 KickUser::user_id() const {
  // @@protoc_insertion_point(field_get:Msg2Route.KickUser.user_id)
  return user_id_;
}
inline void KickUser::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Msg2Route.KickUser.user_id)
}

// .BaseDefine.ClientType client_type = 2;
inline void KickUser::clear_client_type() {
  client_type_ = 0;
}
inline ::BaseDefine::ClientType KickUser::client_type() const {
  // @@protoc_insertion_point(field_get:Msg2Route.KickUser.client_type)
  return static_cast< ::BaseDefine::ClientType >(client_type_);
}
inline void KickUser::set_client_type(::BaseDefine::ClientType value) {
  
  client_type_ = value;
  // @@protoc_insertion_point(field_set:Msg2Route.KickUser.client_type)
}

// string kick_result_string = 3;
inline void KickUser::clear_kick_result_string() {
  kick_result_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KickUser::kick_result_string() const {
  // @@protoc_insertion_point(field_get:Msg2Route.KickUser.kick_result_string)
  return kick_result_string_.GetNoArena();
}
inline void KickUser::set_kick_result_string(const ::std::string& value) {
  
  kick_result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg2Route.KickUser.kick_result_string)
}
#if LANG_CXX11
inline void KickUser::set_kick_result_string(::std::string&& value) {
  
  kick_result_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg2Route.KickUser.kick_result_string)
}
#endif
inline void KickUser::set_kick_result_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kick_result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg2Route.KickUser.kick_result_string)
}
inline void KickUser::set_kick_result_string(const char* value, size_t size) {
  
  kick_result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg2Route.KickUser.kick_result_string)
}
inline ::std::string* KickUser::mutable_kick_result_string() {
  
  // @@protoc_insertion_point(field_mutable:Msg2Route.KickUser.kick_result_string)
  return kick_result_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KickUser::release_kick_result_string() {
  // @@protoc_insertion_point(field_release:Msg2Route.KickUser.kick_result_string)
  
  return kick_result_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KickUser::set_allocated_kick_result_string(::std::string* kick_result_string) {
  if (kick_result_string != NULL) {
    
  } else {
    
  }
  kick_result_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kick_result_string);
  // @@protoc_insertion_point(field_set_allocated:Msg2Route.KickUser.kick_result_string)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Msg2Route

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Msg2Route_2eproto
